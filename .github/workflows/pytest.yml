name: 'Python单元测试'                                            # 等同于流水线名称

on:                                                              # 触发方式
  workflow_dispatch:

jobs:                                                            # 任务编排
  check:                                                         # Job ID
    runs-on: ubuntu-latest                                       # 指定执行环境
    steps:                                                       # 步骤编排
    - name: '使用自定义action进行单元测试'                         # 步骤名称
      uses: 786980206/pytest@main                                # 指定使用的action和版本, 类似于选择插件和版本, 这里指定的是一个自定义的action

  build:                                                         # Job ID
    needs: check                                                 # 设置依赖关系, 决定了流水线是串行还是并行
    runs-on: ubuntu-latest
    steps:
    - name: 下载产物
      uses: actions/download-artifact@v3
      with:                                                      # 指定action参数, 类似于配置插件input, 每个action在定义时会有input的定义
        name: '测试报告'        
    - name: '展示当前目录下文件'
      run: ls -la
    - name: '获取自定义action输出'
      run: echo ${{ needs.check.outputs.test }}

  set_output:
    runs-on: ubuntu-latest
    outputs:                                                     # 指定Job的输出矩阵, 和我们的处理不太一样, 我们Job的outputs是直接由steps的output汇总来的, 不是定义出来的
      output1: ${{ steps.step1.outputs.test }}
      output2: ${{ steps.step2.outputs.test }}
    steps:
      - id: step1
        run: echo "test=hello" >> "$GITHUB_OUTPUT"               # Step的结果输出， 是类似ini文件的方式 
      - id: step2
        run: echo "test=world" >> "$GITHUB_OUTPUT"

  get_output:
    runs-on: ubuntu-latest
    needs: set_output
    steps:
      - env:
          OUTPUT1: ${{needs.set_output.outputs.output1}}          # 跨Job的输出引用, 使用 needs 来串联
          OUTPUT2: ${{needs.set_output.outputs.output2}}
        run: echo "$OUTPUT1 $OUTPUT2"
